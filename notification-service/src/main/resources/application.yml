server:
  port: 9001

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  application:
    name: notification-service
  config:
    import: optional:configserver:http://localhost:8088
  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: "order-1"
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
#    bootstrap-servers: host.docker.internal:9092,host.docker.internal:9093
#    listener:
#      ack-mode: record
#    producer:
#      client-id: notification-service
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: ru.gamrekeli.notificationservice.configurations.DltMessageSerializer
#      retries: 3
#    consumer:
#      group-id: notification-service
#      autoOffsetReset: earliest
#      keyDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#      valueDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#    properties:
#      spring.json.value.default.type: ru.gamrekeli.notificationservice.message.Message
#      spring:
#        json:
#          value:
#            default:
#              type: ru.gamrekeli.notificationservice.model.User
#      spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
#      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer

topics:
  notification-topic: notification

